-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;

-- Projects table
create table public.projects (
  id uuid default uuid_generate_v4() primary key,
  title text not null,
  slug text not null unique,
  description text,
  content text,
  featured_image text,
  technologies text[],
  demo_url text,
  github_url text,
  is_featured boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Blog posts table
create table public.blog_posts (
  id uuid default uuid_generate_v4() primary key,
  title text not null,
  slug text not null unique,
  excerpt text,
  content text not null,
  cover_image text,
  published boolean default false,
  published_at timestamp with time zone,
  tags text[],
  author_id uuid references auth.users(id) on delete set null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Contact form submissions
create table public.contact_submissions (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  email text not null,
  subject text,
  message text not null,
  is_read boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Skills table
create table public.skills (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  category text not null,
  proficiency int check (proficiency between 1 and 5),
  icon_name text,
  display_order int default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create indexes for better query performance
create index idx_projects_slug on public.projects(slug);
create index idx_blog_posts_slug on public.blog_posts(slug);
create index idx_blog_posts_published on public.blog_posts(published, published_at);
create index idx_skills_category on public.skills(category);

-- Set up Row Level Security (RLS)
alter table public.projects enable row level security;
alter table public.blog_posts enable row level security;
alter table public.contact_submissions enable row level security;
alter table public.skills enable row level security;

-- Create policies for public access
create policy "Public projects are viewable by everyone." 
on public.projects for select 
using (true);

create policy "Public blog posts are viewable by everyone." 
on public.blog_posts for select 
using (published = true);

create policy "Anyone can submit a contact form." 
on public.contact_submissions for insert 
with check (true);

create policy "Public skills are viewable by everyone." 
on public.skills for select 
using (true);

-- Create a function to handle updated_at timestamps
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

-- Set up triggers for updated_at
create trigger handle_projects_updated_at
before update on public.projects
for each row execute procedure public.handle_updated_at();

create trigger handle_blog_posts_updated_at
before update on public.blog_posts
for each row execute procedure public.handle_updated_at();

-- Create a function to generate slugs from titles
create or replace function public.slugify(text)
returns text as $$
  select regexp_replace(
    regexp_replace(
      lower($1),
      '[^\w\s-]', '', 'g'
    ),
    '\s+', '-', 'g'
  );
$$ language sql immutable;

-- Create a function to handle slug generation on insert/update
create or replace function public.handle_slug()
returns trigger as $$
begin
  if new.slug is null or new.slug = '' then
    new.slug := public.slugify(new.title);
  end if;
  return new;
end;
$$ language plpgsql;

-- Set up triggers for slug generation
create trigger handle_projects_slug
before insert or update on public.projects
for each row execute procedure public.handle_slug();

create trigger handle_blog_posts_slug
before insert or update on public.blog_posts
for each row execute procedure public.handle_slug();

-- Add some default data
insert into public.skills (name, category, proficiency, icon_name, display_order) values
('React', 'Frontend', 5, 'react', 1),
('TypeScript', 'Frontend', 5, 'typescript', 2),
('JavaScript', 'Frontend', 5, 'javascript', 3),
('Node.js', 'Backend', 4, 'nodejs', 4),
('Tailwind CSS', 'Frontend', 5, 'tailwind', 5),
('PostgreSQL', 'Database', 4, 'postgresql', 6),
('Git', 'Tools', 5, 'git', 7),
('Docker', 'DevOps', 3, 'docker', 8);
