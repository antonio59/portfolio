-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;

-- Users table (extending auth.users)
create table public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  username text unique,
  full_name text,
  avatar_url text,
  website text,
  updated_at timestamp with time zone,
  created_at timestamp with time zone default now(),
  constraint username_length check (char_length(username) >= 3)
);

-- Blog posts table
create table public.posts (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references auth.users not null,
  title text not null,
  slug text unique not null,
  excerpt text,
  content text,
  cover_image text,
  published boolean default false,
  published_at timestamp with time zone,
  tags text[],
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Projects table
create table public.projects (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references auth.users not null,
  title text not null,
  slug text unique not null,
  description text,
  content text,
  featured_image text,
  technologies text[],
  demo_url text,
  github_url text,
  is_featured boolean default false,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Contact form submissions
create table public.contact_submissions (
  id uuid default uuid_generate_v4() primary key,
  name text not null,
  email text not null,
  subject text,
  message text not null,
  is_read boolean default false,
  created_at timestamp with time zone default now()
);

-- Row Level Security (RLS) Policies
-- Enable RLS on all tables
alter table public.profiles enable row level security;
alter table public.posts enable row level security;
alter table public.projects enable row level security;
alter table public.contact_submissions enable row level security;

-- Profiles policies
create policy "Public profiles are viewable by everyone." 
  on profiles for select 
  using (true);

create policy "Users can update their own profile."
  on profiles for update
  using (auth.uid() = id);

-- Posts policies
create policy "Public posts are viewable by everyone."
  on posts for select
  using (published = true);

create policy "Users can view their own posts."
  on posts for select
  using (auth.uid() = user_id);

create policy "Users can create posts."
  on posts for insert
  with check (auth.role() = 'authenticated');

create policy "Users can update their own posts."
  on posts for update
  using (auth.uid() = user_id);

create policy "Users can delete their own posts."
  on posts for delete
  using (auth.uid() = user_id);

-- Projects policies
create policy "Public projects are viewable by everyone."
  on projects for select
  using (true);

create policy "Users can manage their own projects."
  on projects
  for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Contact submissions (admin only)
create policy "Only authenticated users can submit contact forms"
  on contact_submissions for insert
  with check (auth.role() = 'authenticated');

create policy "Admins can view all contact submissions"
  on contact_submissions for select
  using (auth.role() = 'service_role');

-- Create a function to handle new user signups
create or replace function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, username, full_name, avatar_url)
  values (
    new.id, 
    new.raw_user_meta_data->>'username',
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create a function to get the current user's profile
create or replace function public.get_current_user_profile()
returns json as $$
  select json_build_object(
    'id', auth.uid(),
    'email', auth.jwt() ->> 'email',
    'username', (select username from public.profiles where id = auth.uid()),
    'full_name', (select full_name from public.profiles where id = auth.uid()),
    'avatar_url', (select avatar_url from public.profiles where id = auth.uid())
  );
$$ language sql security definer;
